<script>
    import Header from "./Header.tera";
 
    // TODO: Test with async
    let number = 0;
    function sleep(ms) {
      number++;
      return new Promise((ok, err) => {
        return setTimeout(number % 3 === 0 ? () => err("uh oh") : () => ok("ok"), ms);
      });
    }

    const $state = $watch({
        condition: false,
        count: 0,
        letters: ["a", "b", "c", "d", "e", "f", "g"],
        deep: {
            text: "",
            class: ""
        },
        sleeper: sleep(1000),
        showeffects: false
    });

    const $derived = $watch({
        get isEven() { return $state.count % 2 == 0 },
    })

    $run(() => {
        console.log("the count is " + $state.count)
    })

    function increment() {
        $state.count += 1;
        console.log($state.count);
    }

    function nextLetter() {
        return Array.from("abcdefghijklmnopqrstuvwxyz").filter(f => !$state.letters.includes(f))[0];
    }
</script>

<div id="app">
    <h2>Demo</h2>

    <p>
        The count is <strong>{$state.count}</strong>.
        It is {$derived.isEven ? "even" : "odd"}.
    </p>
    @if ($state.showeffects) {
        <Effects />
    }
    @// Ignore this comment
    @const x = 5;
    <button onclick=increment>Increment</button>
    <button onclick={() => $state.count = 0}>Reset</button>
    <button onclick={() => $state.showeffects = !$state.showeffects}>Show/hide effects</button>
    @switch ($state.count) {
        case 0: {
            <p>Zero</p>
        }
        case 1: {
            <p>One</p>
        }
        case 2: {
            <p>Two</p>
        }
        case 3: {
            <p>Three</p>
        }
        default: {
            <p>More</p>
        }
    }
    @if ($state.count > 5 && $state.count <= 10) {
        <p>Whoa there!</p>
    } else if ($state.count > 10) {
        <p>I said whoa there!!</p>
        <p>BUDDY</p>
    }

    <Header name="Bob"/>
    <SlottedHeader />

    @// FOR ===
    <p>
        @for (let i = 0; i < $state.letters.length; i++) {
            @key = $state.letters[i];
            @// TODO: replace with <text> tags
            <span>{i > 0 ? ", " : ""}{$state.letters[i]}</span>
        }
    </p>
    <button onclick={() => {
      const newLetters = $state.letters
        .map(value => ({ value, sort: Math.random() }))
        .sort((a, b) => a.sort - b.sort)
        .map(({ value }) => value)
      console.log(newLetters);
      $state.letters = newLetters;
    }}>
        Shuffle letters
    </button>
    <button onclick={() => {
        console.log($state.letters)
      $state.letters.push(nextLetter());
    }}>
        Add a letter
    </button>
    <button onclick={() => {
      $state.letters.splice(3, 1, nextLetter());
    }}>
        Change a letter
    </button>
    <button onclick={() => {
      //$state.letters.splice(5, 0, nextLetter());
      $state.letters.unshift(nextLetter());
    }}>
        Insert a letter
    </button>
    <button onclick={() => {
      $state.letters.reverse();
    }}>
        Reverse letters
    </button>

    <p>x is {x}</p>
    @await ($state.sleeper) {
        <p>Loading...</p>
    } then (result) {
        <p>Loaded: {result}!</p>
    } catch (ex) {
        <p>Something went wrong: {ex}</p>
    }
    <button onclick={() => {
      console.log("resetting");
      $state.sleeper = sleep(500);
    }}>
        Reset timer
    </button>

    <p>
        <a href="/">Index</a>
    </p>
</div>

<style>
    h2 {
        color: lavender;
    }
</style>

<template name="Header">
    <h2>Hi, {$props.name}!</h2>
</template>

<template name="SlottedHeader">
    <h2>
        <:slot>
            Default header...
        </:slot>
    </h2>
</template>

<template name="Effects">
    <script>
        $run(() => {
            console.log("on mounting");
            return () => {
                console.log("on unmounting");
            }
        })
    </script>

    <p>Effects are in effect</p>
</template>
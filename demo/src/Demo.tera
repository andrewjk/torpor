<script>
    import watch from "../../watch/src/watch";
 
    // TODO: Test with async
    let number = 0;
    function sleep(ms: number) {
      number++;
      return new Promise((ok: any, err: any) => {
        return setTimeout(number % 3 === 0 ? () => err("uh oh") : () => ok("ok"), ms);
      });
    }

    const state = watch({
        condition: false,
        count: 0,
        letters: ["a", "b", "c", "d", "e", "f", "g"],
        deep: {
            text: "",
            class: ""
        },
        sleeper: sleep(1000),
    });

    function increment() {
        state.count += 1;
        console.log(state.count);
    }

    function nextLetter() {
        return Array.from("abcdefghijklmnopqrstuvwxyz").filter(f => !state.letters.includes(f))[0];
    }
</script>

<div>
    <p>
        The count is <strong>{state.count}</strong>.
        It is {state.count % 2 == 0 ? "even" : "odd"}.
    </p>
    @// Ignore this comment
    @const x = 5;
    <button onclick=increment>Increment</button>
    <button onclick={() => state.count = 0}>Reset</button>
    @switch (state.count) {
        @case 0: {
            <p>Zero</p>
        }
        @case 1: {
            <p>One</p>
        }
        @case 2: {
            <p>Two</p>
        }
        @case 3: {
            <p>Three</p>
        }
        @default: {
            <p>More</p>
        }
    }
    @if (state.count > 5 && state.count <= 10) {
        <p>Whoa there!</p>
    } else if (state.count > 10) {
        <p>I said whoa there!!</p>
        <p>BUDDY</p>
    }

    @// FOR ===
    <p>
        @for (let i = 0; i < state.letters.length; i++) {
            @key = state.letters[i];
            @// TODO: replace with <text> tags
            <span>{i > 0 ? ", " : ""}{state.letters[i]}</span>
        }
    </p>
    <button onclick={() => {
      state.letters = state.letters
        .map(value => ({ value, sort: Math.random() }))
        .sort((a, b) => a.sort - b.sort)
        .map(({ value }) => value)
    }}>
        Shuffle letters
    </button>
    <button onclick={() => {
      // HACK: should be able to push
      state.letters = [...state.letters, nextLetter()]
    }}>
        Add a letter
    </button>
    <button onclick={() => {
      // HACK: should be able to update
      state.letters = [...state.letters.slice(0, 3), nextLetter(), ...state.letters.slice(4)];
    }}>
        Change a letter
    </button>
    <button onclick={() => {
      // HACK: should be able to update
      state.letters = [...state.letters.slice(0, 5), nextLetter(), ...state.letters.slice(5)];
    }}>
        Insert a letter
    </button>
    <button onclick={() => {
      // HACK: should be able to update
      state.letters = state.letters.map((l, i) => state.letters[state.letters.length - 1 - i]);
    }}>
        Reverse letters
    </button>

    <p>x is {x}</p>
    @await (state.sleeper) {
        <p>Loading...</p>
    } then (result) {
        <p>Loaded: {result}!</p>
    } catch (ex) {
        <p>Something went wrong: {ex}</p>
    }
    <button onclick={() => {
      console.log("resetting");
      state.sleeper = sleep(500);
    }}>
        Reset timer
    </button>
</div>

<style>
    :global(html) {
        font-family: sans-serif;
        font-size: 15px;
    }

    .container{
        text-align: center;
        margin: 0 auto;
        max-width: 500px;
    }
</style>

import { PrismaClientKnownRequestError } from "@prisma/client/runtime";
import { unprocessable } from "@tera/kit/response";
import logger from "../../utils/logger";

/**
 * Middleware that handles errors generated by the prisma orm.
 * @param err Error
 * @param _req Request
 * @param res Response
 * @param next NextFunction
 * @returns
 */
export default async function prismaErrorHandler(
	err: Error,
	_req: Request,
	res: Response,
	next: NextFunction,
) {
	if (!(err instanceof PrismaClientKnownRequestError)) return next(err);

	logger.debug(`treating PrismaKnowRequestError with code ${err.code}`);
	switch (err.code) {
		case "P2002":
			return unprocessable({ errors: [`the field ${err.meta?.target} is not unique`] });
		case "P2025":
			return unprocessable({
				errors: [`${err.meta?.cause}`],
			});
		default:
			logger.debug(`Unhandled error with code ${err.code} in prismaErrorHandler`);
			return serverError;
	}
}

import { type State } from "./Boundary";

export default function Panel($props: State) {
	let $state = $watch({
		mode: "ui"
	});

	@render {
		@// HACK: Should be using @torpor/ui TabGroup
		<div class="tab-group">
			<button
				class={["tab-header", "plain", $state.mode === "ui" ? "active" : ""]}
				onclick={() => $state.mode = "ui"}
				aria-controls="tab-content-ui"
			>
				UI
			</button>
			<button
				class={["tab-header", "plain", $state.mode === "events" ? "active" : ""]}
				onclick={() => $state.mode = "events"}
				aria-controls="tab-content-events"
			>
				Events
			</button>
		</div>

		<div id="tab-content-ui" style={{ display: $state.mode === "ui" ? "block" : "none"}}>
			<p>
				<button onclick={$props.reload}>Refresh</button>
			</p>

			@if ($props.error) {
				<p class="error">{$props.error}</p>
			}
			@if ($props.warning) {
				<p class="warning">{$props.warning}</p>
			}

			@for (let bound of $props.boundaries) {
				<section>
					<div class="indent">
					@for (let i = 0; i < bound.depth; i++) {
						<span>â€¢</span>
					}
					</div>
					<div>
					<button
						class={["plain", bound.type, bound.recent ? "recent" : null]}
						onclick={() => bound.onexpand(bound.id)}
						onmouseenter={() => bound.onmark(bound.id)}
						onmouseleave={bound.onunmark}
					>
						{bound.type.toUpperCase()}: {bound.name}
					</button>
					@if (bound.expanded) {
						<p>{bound.details}</p>
					}
					</div>
				</section>
			}
		</div>

		<div id="tab-content-events" style={{ display: $state.mode === "events" ? "block" : "none"}}>
			<p>
				<button onclick={() => $props.events = []}>Clear</button>
			</p>

			@for (let message of $props.events) {
				<p>
					{message}
				</p>
			}
		</div>
	}

	@style {
		.tab-group {
			display: grid;
			grid-template-columns: 1fr 1fr;
			gap: 10px;
		}

		.tab-header {
			background: #efefef !important;
			border-radius: 4px;
		}

		.tab-header.active {
			background: #dedede !important;		
			font-weight: bold;
		}

		section {
			display: flex;
			gap: 6px;
			border-bottom: 1px solid gainsboro;
			padding: 0;
		}

		.indent {
			display: flex;
			gap: 4px;
			color: gainsboro;
			padding: 4px 0;
		}

		.indent > div {
			background-color: gainsboro;
			width: 2px;
			display: inline-block;
		}

		.plain {
			background: none;
			border: none;
			min-width: auto;
			margin: 0;
			padding: 6px 0;
			cursor: pointer;
			transition: color 1s;
		}

		.recent {
			transition: none;
		}

		.watch.recent {
			color: cornflowerblue;
		}

		.run.recent {
			color: fuchsia;
		}

		.region.recent {
			color: limegreen;
		}

		p {
			margin: 0;
			padding: 6px 0;
		}

		.error {
			color: red;
		}

		.warning {
			color: orange;
		}
	}
}

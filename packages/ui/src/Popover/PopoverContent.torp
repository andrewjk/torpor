import { addDocumentEvent, removeDocumentEvent } from "../utils/documentEvents";
import { PopoverContextName, type PopoverContext } from "./PopoverTypes";

/**
 * The content that is displayed for a Popover when it is open, such as a Dialog
 * in the middle of the screen or a div that slides in from the side.
 */
export default function PopoverContent($props: any) {
	let div: HTMLDivElement;
	let shown = false;
	let closeOnClick = false;

	// Get stuff out of the PopoverContext
	const context = $context[PopoverContextName] as PopoverContext;
	if (!context) {
		throw new Error("PopoverContent must be contained within a Popover");
	}
	let $state = context.state;

	$run(() => {
		if (!$state.visible) {
			hide();
		}
	});

	function show() {
		shown = true;

		// HACK: Because this Popover could be shown with a click, we need to wait for another mousedown
		// before we close on click. Otherwise the click immediately bubbles to the document
		closeOnClick = false;
		addDocumentEvent("mousedown", handleDocumentMouseDown);
		addDocumentEvent("click", handleDocumentClick);

		if (context.focusFirstElement) {
			context.focusFirstElement();
		}
	}

	function hide() {
		if (!shown) return;

		removeDocumentEvent("mousedown", handleDocumentMouseDown);
		removeDocumentEvent("click", handleDocumentClick);

		// Focus the anchor element per WAI guidelines
		if (context.anchorElement?.focus) {
			context.anchorElement.focus();
		}
	}

	function handleDocumentMouseDown() {
		closeOnClick = true;
	}

	function handleDocumentClick(e: MouseEvent) {
		if (
			closeOnClick &&
			div &&
			!div.contains(e.target as HTMLElement) &&
			(!context.anchorElement || !context.anchorElement.contains(e.target as HTMLElement))
		) {
			context.handleClickOutside!(e);
		}
	}

	@render {
		@if ($state.visible) {
			<div
				id={$props.id}
				class={`torp-popover-content ${$props.class ?? ""}`.trim()}
				&ref={div}
				:onmount={show}
			>
				<:slot />
			</div>
		}
	}
}

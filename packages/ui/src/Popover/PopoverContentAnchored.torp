import { addDocumentEvent, removeDocumentEvent } from "../utils/documentEvents";
import getScrollParent from "../utils/getScrollParent";
import setPopoverPosition from "../utils/setPopoverPosition";
import { PopoverContextName, type PopoverContext } from "./PopoverTypes";

/**
 * The content that is displayed for a Popover when it is open, displayed
 * alongside an element.
 *
 * @prop {"top" | "right" | "bottom" | "left"} site -- Where the popover will be
 * shown, relative to the popover button
 * @prop {"start" | "center" | "end"} alignment -- How the popover will be
 * aligned, relative to the popover button
 */
export default function PopoverContentAnchored($props: any) {
	$props.side ??= "bottom";
	$props.alignment ??= "center";

	let div: HTMLDivElement;
	let shown = false;
	let closeOnClick = false;

	// Get stuff out of the PopoverContext
	const context = $context[PopoverContextName] as PopoverContext;
	if (!context) {
		throw new Error("PopoverContentAnchored must be contained within a Popover");
	}
	let $state = context.state;

	$run(() => {
		if (!$state.visible) {
			hide();
		}
	});

	function show() {
		shown = true;

		// HACK: Because this Popover could be shown with a click, we need to wait for another mousedown
		// before we close on click. Otherwise the click immediately bubbles to the document
		closeOnClick = false;
		addDocumentEvent("mousedown", handleDocumentMouseDown);
		addDocumentEvent("click", handleDocumentClick);

		// Set the position and listen for window resize and scroll to reset the position
		setPosition();
		const scrollParent = getScrollParent(context.anchorElement)
		scrollParent.addEventListener("resize", setPosition);
		scrollParent.addEventListener("scroll", setPosition);
		if (context.focusFirstElement) {
			context.focusFirstElement();
		}
	}

	function hide() {
		if (!shown) return;

		removeDocumentEvent("mousedown", handleDocumentMouseDown);
		removeDocumentEvent("click", handleDocumentClick);

		// Stop listening for window resize and focus the anchor element per WAI guidelines
		const scrollParent = getScrollParent(context.anchorElement)
		scrollParent.removeEventListener("resize", setPosition);
		scrollParent.removeEventListener("scroll", setPosition);
		if (context.anchorElement?.focus) {
			context.anchorElement.focus();
		}
	}

	function handleDocumentMouseDown() {
		closeOnClick = true;
	}

	function handleDocumentClick(e: MouseEvent) {
		if (
			closeOnClick &&
			div &&
			!div.contains(e.target as HTMLElement) &&
			(!context.anchorElement || !context.anchorElement.contains(e.target as HTMLElement))
		) {
			e.preventDefault();
			context.handleClickOutside!(e);
		}
	}

	function setPosition() {
		if (!context.anchorElement) {
			throw new Error("PopoverContentAnchored must have an anchor element");
		}

		setPopoverPosition(context.anchorElement, div, $props.side, $props.alignment);
	}

	@render {
		@if ($state.visible) {
			<div
				{$props.id}
				class={`torp-popover-content-anchored ${$props.class ?? ""}`.trim()}
				&ref={div}
				onmount={show}
			>
				<slot />
			</div>
		}
	}
}

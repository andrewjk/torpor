import { PopoverContextName, type PopoverContext } from "./PopoverTypes";

interface PopoverTriggerContextualProps {
	/** An ID for the root element */
	id?: string;
	/** Class name(s) for the root element */
	class?: string,
}

/**
 * The element that causes a Popover to appear or disappear when right-clicked.
 */
export default function PopoverTriggerContextual($props: PopoverTriggerContextualProps) {
	$props ??= $watch({});

	// Get stuff out of the PopoverContext
	const context = $context[PopoverContextName] as PopoverContext;
	if (!context) {
		throw new Error("PopoverTriggerContextual must be contained within a Popover");
	}
	let $state = context.state;

	function handleContextual(e: MouseEvent & { currentTarget: EventTarget & HTMLDivElement }) {
		e.preventDefault();
		if ($state.position) {
			// Get the position relative to the element, so we can reposition on scroll
			const rect = e.currentTarget.getBoundingClientRect();
			const x = e.clientX - rect.left;
			const y = e.clientY - rect.top;
			$state.position = { x, y };
			//$state.position = { x: window.scrollX + e.clientX, y: window.scrollY + e.clientY };
		}
		$state.visible = !$state.visible;
	}

	@render {
		<div
			{$props.id}
			class={`torp-popover-trigger-contextual ${$props.class ?? ""}`.trim()}
			oncontextmenu={handleContextual}
			&ref={context.anchorElement}
		>
			<slot />
		</div>
	}
}

import { PopoverContextName, type Point, type PopoverContext, type PopoverState } from "./PopoverTypes";

interface PopoverProps {
	/** An ID for the root element */
	id?: string;
	/** Class name(s) for the root element */
	class?: string,
	/** Whether the popover is modal. If true, an overlay should be supplied to obscure outside content, and only the popover content will be visible to screen readers  */
	modal?: boolean,
	/** Whether the popover is visible  */
	visible?: boolean,
	/** The element to anchor this popover to, as an alternative to supplying a PopoverTrigger  */
	anchor?: HTMLElement,
	/** The position to display this popover at if it's contextual, as an alternative to supplying a PopoverTriggerContextual  */
	position?: Point,
	/** A function to be called when the user selects a response */
	callback?: ((value: any) => void),
	/** Raised when the popover is opened or closed */
	ontoggle?: (open: boolean) => void,
	/** Raised when the popover has opened */
	onopen?: () => void,
	/** Raised when the popover has closed */
	onclose?: (result: any) => void,
}

/**
 * A popover window that is shown to the user relative to an anchor element.
 *
 * The structure of a Popover is:
 *
 * ```
 * <Popover>
 * 	<PopoverTrigger /> (optional)
 * 	<PopoverContent />
 * </Popover>
 * ```
 */
export default function Popover($props: PopoverProps | undefined) {
	let $state: PopoverState = $watch({
		visible: false,
		position: { x: 0, y: 0 }
	})

	// Sync props and state
	$run(() => {
		$state.visible = $props?.visible ?? false;
		$state.position = $props?.position ?? { x: 0, y: 0 };
	});
	$run(() => {
		if ($props !== undefined) {
			$props.visible = $state.visible;
		}
	});

	let result: any;

	// Set the context to pass down to items
	let context: PopoverContext = {
		handleButton,
		handleClickOutside,
		state: $state,
		modal: $props?.modal,
		anchorElement: $props?.anchor ? $unwrap($props.anchor) : undefined,
	};
	$context[PopoverContextName] = context;

	// Dispatch the toggle event when the popover is opened or closed
	let firstToggle = true;
	$run(() => {
		const ontoggle = $props?.ontoggle;
		const onopen = $props?.onopen;
		const onclose = $props?.onclose;
		const visible = $state.visible;
		if (firstToggle) {
			firstToggle = false;
		} else {
			if (ontoggle) ontoggle(visible);
			if (visible) {
				if (onopen) onopen()
			} else {
				if (onclose) onclose(result);
			}
		}
	});

	function handleButton(type: "confirm" | "cancel" | undefined, value?: any) {
		// Get the button's result
		switch (type) {
			case "confirm": {
				result = value || true;
				break;
			}
			case "cancel": {
				result = value || false;
				break;
			}
			default: {
				result = value;
				break;
			}
		}

		// Hide the popover
		$state.visible = false;

		// Call the callback
		if ($props?.callback) {
			$props?.callback(result);
		}
	}

	function handleClickOutside(e: MouseEvent) {
		e.preventDefault();
		$state.visible = false;
	}

	@render {
		<div
			{$props?.id}
			class={`torp-popover ${$props?.class ?? ""}`.trim()}
		>
			<slot />
		</div>
	}
}
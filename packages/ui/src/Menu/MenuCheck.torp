import {
	MenuButtonContextName,
	MenuContextName,
	type MenuButtonContext,
	type MenuContext
} from "./MenuTypes";

interface MenuCheckProps {
	/** An ID for the root element */
	id?: string;
	/** Class name(s) for the root element */
	class?: string,
	/** Whether this item is checked */
	checked?: boolean,
	/** Whether this item is disabled */
	disabled?: boolean,
	/** Raised when the checkbox is clicked */
	onclick?: (e: MouseEvent) => void,
}

/**
 * A button that is placed in a Menu or MenuGroup to allow the user to turn an
 * option on or off.
 *
 */
export default function MenuCheck($props: MenuCheckProps | undefined) {
	let $state = $watch({
		checked: $props?.checked ?? false
	});

	$run(() => {
		if ($props !== undefined) {
			$props.checked = $state.checked;
		}
	});

	let button: HTMLButtonElement;

	// Get stuff out of the MenuContext
	const menuContext = $context[MenuContextName] as MenuContext;
	if (!menuContext) {
		throw new Error("MenuCheck must be contained within a Menu");
	}
	const { registerItem, handleItemKey, handleItemFocus } = menuContext;

	// Register this item with the parent Menu
	const { index } = registerItem(setFocused);

	// Set the context to pass down to items
	let context: MenuButtonContext = {
		state: $state
	};
	$context[MenuButtonContextName] = context;

	function setFocused() {
		button.focus();
	}

	function handleClick(e: MouseEvent) {
		$state.checked = !$state.checked;
		if ($props?.onclick) {
			$props.onclick(e);
		}
	}

	@render {
		<button
			{$props?.id}
			class={`torp-menu-check ${$props?.class ?? ""}`.trim()}
			type="button"
			{$props?.disabled}
			role="menuitemcheckbox"
			aria-checked={$props?.checked ? "true" : "false"}
			aria-disabled={$props?.disabled ? "true" : undefined}
			data-state={$props?.checked ? "checked" : "unchecked"}
			data-disabled={$props?.disabled ? "true" : undefined}
			onkeydown={handleItemKey}
			onclick={handleClick}
			onfocus={() => handleItemFocus(index)}
			&ref={button}
		>
			<slot />
		</button>
	}
}

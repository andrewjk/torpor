
import getScrollParent from "../utils/getScrollParent";
import setPopoverPosition from "../utils/setPopoverPosition";
import { NavMenuPopoutContextName, type NavMenuPopoutContext } from "./NavMenuTypes";

interface NavMenuPopoutContentProps {
	/** An ID for the root element */
	id?: string;
	/** Class name(s) for the root element */
	class?: string,
	/** Where the popout will be shown, relative to the popout button */
	side?: "top" | "right" | "bottom" | "left",
	/** How the popout will be aligned, relative to the popout button */
	alignment?: "start" | "center" | "end",
}

/**
 * The content that is displayed for a NavMenuPopout when it is open.
 *
 */
export default function NavMenuPopoutContent($props: NavMenuPopoutContentProps | undefined) {
	let div: HTMLDivElement;
	let shown = false;

	// Get stuff out of the NavMenuPopoutContext
	const context = $context[NavMenuPopoutContextName] as NavMenuPopoutContext;
	if (!context) {
		throw new Error("NavMenuPopoutContent must be contained within a NavMenuPopout");
	}
	let $state = context.state;

	$run(() => {
		if (!$state.visible) {
			hide();
		}
	});

	function show() {
		shown = true;

		// Set the position and listen for window resize and scroll to reset the position
		setPosition();
		const anchorElement = context.anchorElement!
		const scrollParent = getScrollParent(anchorElement)
		scrollParent.addEventListener("resize", setPosition);
		scrollParent.addEventListener("scroll", setPosition);
		if (context.focusFirstElement) {
			context.focusFirstElement();
		}
	}

	function hide() {
		if (!shown) return;

		// Stop listening for window resize and focus the anchor element per WAI guidelines
		const anchorElement = context.anchorElement!
		const scrollParent = getScrollParent(anchorElement)
		scrollParent.removeEventListener("resize", setPosition);
		scrollParent.removeEventListener("scroll", setPosition);
		if (anchorElement.focus) {
			anchorElement.focus();
		}
	}

	function setPosition() {
		if (!context.anchorElement) {
			throw new Error("NavMenuPopoutContent must have an anchor element");
		}

		if (div) {
			let side = $props?.side ?? "bottom";
			let alignment = $props?.alignment ?? "start";
			setPopoverPosition(context.anchorElement, div, side, alignment);
		}
	}

	@render {
		@if ($state.visible) {
			<div
				{$props?.id}
				class={`torp-nav-menu-popout-content ${$props?.class ?? ""}`.trim()}
				&ref={div}
				onmount={show}
			>
				<slot />
			</div>
		}
	}
}

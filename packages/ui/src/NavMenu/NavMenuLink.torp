
import { NavMenuContextName, type NavMenuContext } from "./NavMenuTypes";

interface NavMenuLinkProps {
	/** An ID for the root element */
	id?: string;
	/** Class name(s) for the root element */
	class?: string,
	/** The URL for the menu link */
	href: string,
	/** Whether the menu link should open in a new tab/window */
	newWindow?: boolean,
	/** Whether this link is disabled */
	disabled?: boolean,
}

/**
 * A link that is placed in a NavMenu and signals a response by a user.
 *
 */
export default function NavMenuLink($props: NavMenuLinkProps | undefined) {
	let link: HTMLAnchorElement;

	// Get stuff out of the NavMenuContext
	const menuContext = $context[NavMenuContextName] as NavMenuContext;
	if (!menuContext) {
		throw new Error("NavMenuLink must be contained within a NavMenu");
	}
	const { registerItem, handleItemKey, handleItemFocus } = menuContext;

	// Register this item with the parent NavMenu and store the index
	const { index } = registerItem(setFocused);

	function setFocused() {
		link.focus();
	}

	@render {
		<a
			{$props?.id}
			class={`torp-nav-menu-link ${$props?.class ?? ""}`.trim()}
			{$props?.href}
			{$props?.disabled}
			target={$props?.newWindow ? "_blank" : undefined}
			role="menuitem"
			aria-disabled={$props?.disabled ? "true" : undefined}
			data-disabled={$props?.disabled ? "true" : undefined}
			onkeydown
			onkeydown={handleItemKey}
			onclick
			onfocus={() => handleItemFocus(index)}
			&ref={link}
		>
			<slot />
		</a>
	}
}

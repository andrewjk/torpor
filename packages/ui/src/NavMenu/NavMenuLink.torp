
import { NavMenuContextName, type NavMenuContext } from "./NavMenuTypes";

/**
 * A link that is placed in a NavMenu and signals a response by a user.
 *
 * @prop {string} href -- The URL for the menu link
 * @prop {newWindow} boolean -- Whether the menu link should open in a new tab/window
 * @prop {boolean} disabled -- Whether this link is disabled
 */
export default function NavMenuLink($props: any) {
	$props.newWindow ??= false;

	/** Set when the item is disabled */
	let dataDisabled = $props.disabled || undefined;

	let link: HTMLAnchorElement;

	// Get stuff out of the NavMenuContext
	const menuContext = $context[NavMenuContextName] as NavMenuContext;
	if (!menuContext) {
		throw new Error("NavMenuLink must be contained within a NavMenu");
	}
	const { registerItem, handleItemKey, handleItemFocus } = menuContext;

	// Register this item with the parent NavMenu and store the index
	const { index } = registerItem(setFocused);

	function setFocused() {
		link.focus();
	}

	@render {
		<a
			id={$props.id}
			class={`torp-nav-menu-link ${$props.class ?? ""}`.trim()}
			href={$props.href}
			{$props.disabled}
			target={$props.newWindow ? "_blank" : undefined}
			role="menuitem"
			aria-disabled={$props.disabled ? "true" : undefined}
			data-disabled={dataDisabled}
			onkeydown
			onkeydown={handleItemKey}
			onclick
			onfocus={() => handleItemFocus(index)}
			&ref={link}
		>
			<slot />
		</a>
	}
}

import { NavMenuContextName, type NavMenuContext } from "./NavMenuTypes";

interface NavMenuButtonProps {
	/** An ID for the root element */
	id?: string;
	/** Class name(s) for the root element */
	class?: string,
	/** Whether this button is disabled  */
	disabled?: boolean,
}

/**
 * A button that is placed in a NavMenu to carry out a non-navigation action such as logging out.
 *
 */
export default function NavMenuButton($props: NavMenuButtonProps) {
	$props ??= $watch({});

	let button: HTMLButtonElement;

	// Get stuff out of the NavMenuContext
	const menuContext = $context[NavMenuContextName] as NavMenuContext;
	if (!menuContext) {
		throw new Error("NavMenuButton must be contained within a NavMenu");
	}
	const { registerItem, handleItemKey, handleItemFocus } = menuContext;

	// Register this item with the parent NavMenu and store the index
	const { index } = registerItem(setFocused);

	function setFocused() {
		button.focus();
	}

	@render {
		<button
			{$props.id}
			class={`torp-nav-menu-button ${$props.class ?? ""}`.trim()}
			type="button"
			{$props.disabled}
			role="menuitem"
			aria-disabled={$props.disabled ? "true" : undefined}
			data-disabled={$props.disabled ? "true" : undefined}
			onkeydown
			onkeydown={handleItemKey}
			onclick
			onfocus={() => handleItemFocus(index)}
			&ref={button}
		>
			<slot />
		</button>
	}
}

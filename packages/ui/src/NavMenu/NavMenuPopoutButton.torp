import {
	NavMenuContextName,
	NavMenuPopoutContextName,
	type NavMenuContext,
	type NavMenuPopoutContext,
} from "./NavMenuTypes";

interface NavMenuPopoutButtonProps {
	/** An ID for the root element */
	id?: string;
	/** Class name(s) for the root element */
	class?: string,
	/** The delay before showing the popout, in milliseconds */
	hoverDelay?: number,
	/** Whether this button is disabled */
	disabled?: boolean,
}

/**
 * A button that is placed in a NavMenu and signals a response by a user.
 *
 */
export default function NavMenuPopoutButton($props: NavMenuPopoutButtonProps | undefined) {
	let defaultHoverDelay = 500;

	let button: HTMLButtonElement;
	let interval: NodeJS.Timeout | undefined;

	// Get stuff out of the NavMenuContext
	const menuContext = $context[NavMenuContextName] as NavMenuContext;
	if (!menuContext) {
		throw new Error("NavMenuPopoutButton must be contained within a NavMenu");
	}
	const { registerItem, handleItemKey, handleItemFocus } = menuContext;

	// Get stuff out of the NavMenuPopoutContext
	const popoutContext = $context[NavMenuPopoutContextName] as NavMenuPopoutContext;
	if (!popoutContext) {
		throw new Error("NavMenuPopoutButton must be contained within a NavMenuPopout");
	}
	let $state = popoutContext.state;

	// Register this item with the parent NavMenu and store the index
	const { index } = registerItem(setFocused);

	// TODO: $mount should be run AFTER the button has been set
	//$mount(() => {
	//	// Set the anchor element to the button when it exists
	//	popoutContext.anchorElement = button;
	//});

	function setFocused() {
		button.focus();
	}

	function handleClick() {
		$state.visible = true;
	}

	function handlePopoutKey(e: KeyboardEvent) {
		switch (e.key) {
			case "Right":
			case "ArrowRight":
				// TODO: This should be based on what side the menu shows on
				e.preventDefault();
				$state.visible = true;
				break;
			default:
				handleItemKey(e);
		}
	}

	function handleMouseEnter() {
		if ($props?.disabled) return;

		// Handle the hover after a delay
		if (!interval) {
			interval = setTimeout(() => $state.visible = true, $props?.hoverDelay ?? defaultHoverDelay);
		}
	}

	function handleMouseLeave() {
		if ($props?.disabled) return;

		// Prevent short hovers or touches from firing the event
		if (interval) {
			clearTimeout(interval);
			interval = undefined;
		}
	}

	function handleMouseMove() {
		if ($props?.disabled) return;

		// Reset the interval on mouse move
		if (interval) {
			clearTimeout(interval);
			interval = setTimeout(() => $state.visible = true, $props?.hoverDelay ?? defaultHoverDelay);
		}
	}

	@render {
		<button
			{$props?.id}
			class={`torp-nav-menu-popout-button ${$props?.class ?? ""}`.trim()}
			type="button"
			{$props?.disabled}
			role="menuitem"
			aria-haspopup="true"
			aria-expanded={$state.visible.toString()}
			aria-disabled={$props?.disabled ? "true" : undefined}
			data-disabled={$props?.disabled ? "true" : undefined}
			onkeydown={handlePopoutKey}
			onclick={handleClick}
			onfocus={() => handleItemFocus(index)}
			onmouseenter={handleMouseEnter}
			onmouseleave={handleMouseLeave}
			onmousemove={handleMouseMove}
			&ref={button}
			onmount={(el) => popoutContext.anchorElement = el }
		>
			<slot />
		</button>
	}
}

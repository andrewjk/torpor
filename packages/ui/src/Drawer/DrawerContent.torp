import { type Animation } from "@torpor/view";
import { slide } from "../motion";
import { addDocumentEvent, removeDocumentEvent } from "../utils/documentEvents";
import { DrawerContextName, type DrawerContext } from "./DrawerTypes";

interface DrawerContentProps {
	/** An ID for the root element */
	id?: string;
	/** Class name(s) for the root element */
	class?: string,
}

/**
 * The content that is displayed for a Drawer when it is open.
 */
export default function DrawerContent($props: DrawerContentProps | undefined) {
	let drawer: HTMLElement;
	let shown = false;
	let closeOnClick = false;

	// Get stuff out of the DrawerContext
	const context = $context[DrawerContextName] as DrawerContext;
	if (!context) {
		throw new Error("DrawerContent must be contained within a Drawer");
	}
	let $state = context.state;

	$run(() => {
		if (!$state.visible) {
			hide();
		}
	});

	function show() {
		shown = true;

		// HACK: Because this Drawer could be shown with a click, we need to wait for another mousedown
		// before we close on click. Otherwise the click immediately bubbles to the document
		closeOnClick = false;
		addDocumentEvent("mousedown", handleDocumentMouseDown);
		addDocumentEvent("click", handleDocumentClick);
	}

	function hide() {
		if (!shown) return;

		removeDocumentEvent("mousedown", handleDocumentMouseDown);
		removeDocumentEvent("click", handleDocumentClick);
	}

	function handleDocumentMouseDown() {
		closeOnClick = true;
	}

	function handleDocumentClick(e: MouseEvent) {
		if (
			closeOnClick &&
			drawer &&
			!drawer.contains(e.target as HTMLElement)
		) {
			e.preventDefault();
			context.handleClickOutside!(e);
		}
	}

	@render {
		@if ($state.visible) {
			<div
				{$props?.id}
				class={`torp-drawer-content ${$props?.class ?? ""}`.trim()}
				style="position: fixed;"
				transition={(e) => slide(e, { side: $state.position })}
				&ref={drawer}
				onmount={show}
			>
				<slot />
			</div>
		}
	}
}

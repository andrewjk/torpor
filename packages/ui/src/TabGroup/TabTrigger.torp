import getId from "../utils/getId";
import { TabItemContextName, type TabItemContext } from "./TabGroupTypes";

interface TabTriggerProps {
	/** An ID for the root element */
	id?: string;
	/** Class name(s) for the root element */
	class?: string,
}

/**
 * A header button for a tab item, which can be used to reveal an associated TabContent.
 */
export default function TabTrigger($props: TabTriggerProps | undefined) {
	let defaultId = getId();

	let button: HTMLButtonElement;

	// Get stuff out of the TabItemContext
	const context = $context[TabItemContextName] as TabItemContext;
	if (!context) {
		throw new Error("TabTrigger must be contained within a TabHeader");
	}
	let $state = context.state;

	// Set the header ID so that it can be used with aria-labelledby in TabContent
	$state.headerId = $props?.id ?? defaultId;

	// Let the item know how to set the button's focus
	$state.setFocused = setFocused;

	// This function is called by the parent TabGroup to focus this item's button
	function setFocused() {
		button.focus();
		if (context.activation === "automatic") {
			context.triggerItem($state.value);
		}
	}

	function handleClick() {
		// Pass the value to the triggerItem method in the parent TabGroup which will handle toggling
		// the value of active for all items (e.g. to close other items if necessary)
		context.triggerItem($state.value);
	}

	function handleKey(e: KeyboardEvent) {
		// Pass the key press up to the parent TabGroup which will handle setting the focused button
		context.handleHeaderKey($state.index, e);
	}

	@render {
		<button
			type="button"
			id={$props?.id ?? defaultId}
			class={`torp-tab-trigger ${$props?.class ?? ""}`.trim()}
			role="tab"
			tabindex="-1"
			disabled={$state.disabled || $state.parentDisabled}
			aria-selected={$state.active.toString()}
			aria-disabled={$state.disabled}
			aria-controls={$state.contentId}
			data-state={$state.active ? "active" : "inactive"}
			data-disabled={$state.disabled}
			data-orientation={context.orientation}
			&ref={button}
			onclick={handleClick}
			onkeydown={handleKey}
		>
			<slot />
		</button>
	}
}

import { TabGroupContextName, TabItemContextName, type TabGroupContext, type TabItemContext } from "./TabGroupTypes";

interface TabHeaderProps {
	/** An ID for the root element */
	id?: string;
	/** Class name(s) for the root element */
	class?: string,
	/** The type of HTML header to use */
	as?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6"
	/** The index of this header's item */
	index?: number,
	/** The value for this header's item */
	value?: string,
}

/**
 * The header for a tab item, which contains the TabTrigger.
 *
 * The structure of a TabHeader is:
 * 
 * ```
 * <TabHeader>
 * 	<TabTrigger />
 * </TabHeader>
 * ```
 */
export default function TabHeader($props: TabHeaderProps | undefined) {
	let button: HTMLButtonElement;

	const context = $context[TabGroupContextName] as TabGroupContext;
	if (!context) {
		throw new Error("TabHeader must be contained within a TabGroup");
	}
	let $state = context.registerHeader($props?.index, $props?.value);

	const itemContext: TabItemContext = {
		triggerItem: context.triggerItem,
		handleHeaderKey: context.handleHeaderKey,
		state: $state,
		orientation: context.orientation,
		activation: context.activation
	};
	$context[TabItemContextName] = itemContext;

	// Remove the item from the parent TabGroup when this item is destroyed
	$run(() => {
		return () => {
			context.removeItem($state.index);
		}
	});

	@render {
		@// TODO: $props?.as
		<h4
			{$props?.id}
			class={[
				"torp-tab-header",
				$props?.class,
				context.orientation
			]}
			data-state={$state.active ? "active" : "inactive"}
			data-disabled={$state.disabled ? "true" : undefined}
			&ref={button}
		>
			<slot />
		</h4>
	}

	@style {
		.torp-tab-header.horizontal {
			display: inline-block;
		}

		.torp-tab-header.vertical {
			display: block;
		}
	}
}

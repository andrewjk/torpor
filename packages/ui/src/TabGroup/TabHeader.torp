import { TabGroupContextName, TabItemContextName, type TabGroupContext, type TabItemContext } from "./TabGroupTypes";

/**
 * The header for a tab item, which contains the TabTrigger.
 *
 * The structure of a TabHeader is:
 * 
 * ```
 * <TabHeader>
 * 	<TabTrigger />
 * </TabHeader>
 * ```
 *
 * @prop {"h1" | "h2" | "h3" | "h4" | "h5" | "h6"} as -- The type of HTML header to use
 */
export default function TabHeader($props: any) {
	const context = $context[TabGroupContextName] as TabGroupContext;
	if (!context) {
		throw new Error("TabHeader must be contained within a TabGroup");
	}
	let $state = $context[TabGroupContextName].registerHeader($props.index, $props.value);

	const itemContext: TabItemContext = {
		triggerItem: context.triggerItem,
		handleHeaderKey: context.handleHeaderKey,
		state: $state,
	};
	$context[TabItemContextName] = itemContext;

	// Remove the item from the parent TabGroup when this item is destroyed
	$run(() => {
		return () => {
			context.removeItem($state.index);
		}
	});

	@render {
		@// TODO: $props.as
		<h4
			{$props.id}
			class={[
				"torp-tab-header",
				$props.class,
				$state.orientation
			]}
			data-state={$state.dataState}
			data-disabled={$state.dataDisabled}
		>
			<slot />
		</h4>
	}

	@style {
		.torp-tab-header.horizontal {
			display: inline-block;
		}

		.torp-tab-header.vertical {
			display: block;
		}
	}
}

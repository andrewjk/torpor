import getId from "../utils/getId";
import { DisclosureContextName, type DisclosureContext } from "./DisclosureTypes";

interface DisclosureContentProps {
	/** An ID for the root element */
	id?: string;
	/** Class name(s) for the root element */
	class?: string,
	/** Whether this content should act as a region. Set this when the content contains heading elements or a nested Disclosure */
	ariaRegion?: boolean,
}

/**
 * Content for a Disclosure, which can be revealed or hidden by an associated DisclosureTrigger.
 */
export default function DisclosureContent($props: DisclosureContentProps | undefined) {
	let defaultId = getId();

	const context = $context[DisclosureContextName] as DisclosureContext;
	if (!context) {
		throw new Error("DisclosureContent must be contained within a Disclosure");
	}
	let $state = context.state

	// Set the content ID so that it can be used with aria-controls in DisclosureTrigger
	$state.contentId = $props?.id ?? defaultId;

	@render {
		<div
			id={$props?.id ?? defaultId}
			class={`torp-disclosure-content ${$props?.class ?? ""}`.trim()}
			role={$props?.ariaRegion ? "region" : undefined}
			aria-labelledby={$state.headerId}
			data-state={$state.expanded ? "open" : "closed"}
			data-disabled={$state.disabled ? "true" : undefined}
		>
			@if ($state.expanded) {
				<slot />
			}
		</div>
	}
}

import getId from "../utils/getId";
import { DisclosureContextName, type DisclosureContext } from "./DisclosureTypes";

interface DisclosureTriggerProps {
	/** An ID for the root element */
	id?: string;
	/** Class name(s) for the root element */
	class?: string,
}

/**
 * A header button for a Disclosure, which can be used to reveal or hide an associated DisclosureContent.
 */
export default function DisclosureTrigger($props: DisclosureTriggerProps | undefined) {
	let defaultId = getId();

	// Get stuff out of the DisclosureContext
	const context = $context[DisclosureContextName] as DisclosureContext;
	if (!context) {
		throw new Error("DisclosureTrigger must be contained within a Disclosure");
	}
	let $state = context.state;

	// Set the header ID so that it can be used with aria-labelledby in DisclosureContent
	$state.headerId = $props?.id ?? defaultId;

	@render {
		<button
			type="button"
			id={$props?.id ?? defaultId}
			class={`torp-disclosure-trigger ${$props?.class ?? ""}`.trim()}
			disabled={$state.disabled}
			aria-expanded={$state.expanded.toString()}
			aria-disabled={$state.disabled}
			aria-controls={$state.contentId}
			data-state={$state.expanded ? "open" : "closed"}
			data-disabled={$state.disabled}
			onclick={() => $state.expanded = !$state.expanded}
		>
			<slot />
		</button>
	}
}

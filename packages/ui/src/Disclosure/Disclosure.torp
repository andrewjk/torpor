import { DisclosureContextName, type DisclosureContext, type DisclosureState } from "./DisclosureTypes";

interface DisclosureProps {
	/** An ID for the root element */
	id?: string;
	/** Class name(s) for the root element */
	class?: string,
	/** Whether the Disclosure is expanded and its content visible */
	expanded?: boolean,
	/** If set to true, the user cannot interact with this Disclosure */
	disabled?: boolean,
	/** Raised when this item is opened or closed */
	ontoggle?: (open: boolean) => void,
}

/**
 * An interactive header that enables users to reveal or hide an associated section of content.
 *
 * See [the WAI ARIA guidelines for Disclosures](https://www.w3.org/WAI/ARIA/apg/patterns/disclosure/).
 *
 * The structure of a Disclosure is:
 *
 * ```
 * <Disclosure>
 * 	<DisclosureHeader>
 * 		<DisclosureTrigger />
 * 	</DisclosureHeader>
 * 	<DisclosureContent />
 * </Disclosure>
 * ```
 */
export default function Disclosure($props: DisclosureProps) {
	$props ??= $watch({});
	$props.expanded ??= false;
	$props.disabled ??= false;

	let $state: DisclosureState = $watch({
		expanded: false,
		disabled: false,
		headerId: "",
		contentId: "",
	});

	// Update $state with $props
	$run(() => {
		$state.expanded = $props.expanded === true ||
			// @ts-ignore
			$props.expanded === "true";
		$state.disabled = $props.disabled === true ||
			// @ts-ignore
			$props.disabled === "true";
	});

	// Put stuff into a DisclosureContext
	const itemContext: DisclosureContext = {
		state: $state,
	};
	$context[DisclosureContextName] = itemContext;

	// Dispatch the toggle event when the value of expanded changes
	let firstToggle = true;
	$run(() => {
		const ev = $props.ontoggle;
		const expanded = $state.expanded;
		if (firstToggle) {
			firstToggle = false;
		} else if (ev) {
			ev(expanded);
		}
	});

	@render {
		<div
			{$props.id}
			class={`torp-disclosure-item ${$props.class ?? ""}`.trim()}
			data-state={$state.expanded ? "open" : "closed"}
			data-disabled={$state.disabled ? "true" : undefined}
		>
			<slot />
		</div>
	}
}

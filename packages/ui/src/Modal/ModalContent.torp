import { addDocumentEvent, removeDocumentEvent } from "../utils/documentEvents";
import { ModalContextName, type ModalContext } from "./ModalTypes";

interface ModalContentProps {
	/** An ID for the root element */
	id?: string;
	/** Class name(s) for the root element */
	class?: string,
}

/**
 * The content that is displayed for a Modal when it is open, displayed
 * alongside an element.
 */
export default function ModalContent($props?: ModalContentProps) {
	$props ??= $watch({});

	// HACK:
	if (!$props) return;

	let div: HTMLDivElement;
	let shown = false;
	let closeOnClick = false;

	// Get stuff out of the ModalContext
	const context = $context[ModalContextName] as ModalContext;
	if (!context) {
		throw new Error("ModalContent must be contained within a Modal");
	}
	let $state = context.state;

	$run(() => {
		if (!$state.visible) {
			hide();
		}
	});

	function show() {
		shown = true;

		// HACK: Because this Modal could be shown with a click, we need to wait for another mousedown
		// before we close on click. Otherwise the click immediately bubbles to the document
		closeOnClick = false;
		addDocumentEvent("mousedown", handleDocumentMouseDown);
		addDocumentEvent("click", handleDocumentClick);
	}

	function hide() {
		if (!shown) return;

		removeDocumentEvent("mousedown", handleDocumentMouseDown);
		removeDocumentEvent("click", handleDocumentClick);
	}

	function handleDocumentMouseDown() {
		closeOnClick = true;
	}

	function handleDocumentClick(e: MouseEvent) {
		if (
			closeOnClick &&
			div &&
			!div.contains(e.target as HTMLElement)
		) {
			e.preventDefault();
			context.handleClickOutside!(e);
		}
	}

	@render {
		@if ($state.visible) {
			<div
				{$props.id}
				class={`torp-modal-content ${$props.class ?? ""}`.trim()}
				&ref={div}
				onmount={show}
			>
				<slot />
			</div>
		}
	}
}

import { AccordionItemContextName, type AccordionItemContext } from "./AccordionTypes";

interface AccordionHeaderProps {
	/** An ID for the root element */
	id?: string;
	/** Class name(s) for the root element */
	class?: string,
	/** The type of HTML header to use */
	as?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6",
}

/**
 * The header for an AccordionItem, which contains the AccordionTrigger.
 *
 * The structure of an AccordionHeader is:
 * 
 * ```
 * <AccordionHeader>
 * 	<AccordionTrigger />
 * </AccordionHeader>
 * ```
 */
export default function AccordionHeader($props: AccordionHeaderProps | undefined) {
	const context = $context[AccordionItemContextName] as AccordionItemContext;
	if (!context) {
		throw new Error("AccordionHeader must be contained within an AccordionItem");
	}
	let $state = context.state

	@render {
		@// TODO: $props.as
		<h4
			{$props?.id}
			class={`torp-accordion-header ${$props?.class ?? ""}`.trim()}
			data-state={$state.expanded ? "open" : "closed"}
			data-disabled={$state.disabled ? "true" : undefined}
		>
			<slot />
		</h4>
	}
}

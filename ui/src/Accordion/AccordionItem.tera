/**
 * An item in an Accordion, which must consist of an AccordionTrigger and an AccordionContent.
 * 
 * The structure of an AccordionItem is:
 * 
 * ```
 * <AccordionItem>
 * 	<AccordionHeader>
 * 		<AccordionTrigger />
 * 	</AccordionHeader>
 * 	<AccordionContent />
 * </AccordionItem>
 * ```
 *
 * @prop {number=undefined} [index] -- The index of this item in the Accordion. Set this if you will be inserting, removing or sorting items. If you don't set this, it will be set automatically
 * @prop {string=undefined} [value] -- A value for the item. Set this if you need more control over which item(s) are expanded. If you don't set this, the value will be set to the item's initial index
 * @prop {boolean=false} [disabled] -- If set to true, the user cannot interact with this AccordionItem */
 * @prop {(boolean) => void} [ontoggle] -- Raised when this item is opened or closed
 */

<script>
	import {
		AccordionContextName,
		AccordionItemContextName,
		type AccordionContext,
		type AccordionItemContext
	} from './AccordionTypes';

	interface State {
		expanded: boolean;
		dataState: 'open' | 'closed';
		dataDisabled: boolean | undefined;
	}

	let $state: State = $watch({
		expanded: false,
		disabled: $props.disabled,
		get dataState() {
			return this.expanded ? 'open' : 'closed';
		},
		get dataDisabled() {
			return this.disabled ? true : undefined;
		}
	})

	// Get stuff out of the AccordionContext
	const context = $context[AccordionContextName] as AccordionContext;
	if (!context) {
		throw new Error('AccordionItem must be contained within an Accordion');
	}

	// Put stuff into an AccordionItemContext
	const itemContext: AccordionItemContext = {
		toggleItem: context.toggleItem,
		handleHeaderKey: context.handleHeaderKey,
		index: $props.index,
		value: $props.value,
		state: $state,
	};
	$context[AccordionItemContextName] = itemContext;

	// Register this item with the parent Accordion, which will handle toggling expanded for all items
	const { newIndex, newValue } = context.registerItem($props.index, $props.value, setExpanded, setFocused, setDisabled);
	itemContext.index = newIndex;
	itemContext.value = newValue;

	// Remove the item from the parent Accordion when this item is destroyed
	$run(() => {
		return () => {
			context.removeItem(itemContext.index);
		}
	});

	// Dispatch the toggle event when the value of expanded changes
	// TODO: Should this be a setter instead?
	$run(() => {
		if ($props.ontoggle) {
			$props.ontoggle($state.expanded);
		}
	})

	// Called from the parent Accordion; put the expanded value in the store
	function setExpanded(value: boolean) {
		$state.expanded = value;
	}

	// Called from the parent Accordion; pass the focus command along to the AccordionTrigger
	function setFocused() {
		if (itemContext.setHeaderFocused) {
			itemContext.setHeaderFocused();
		}
	}

	function setDisabled(value: boolean) {
		$state.disabled = value || $state.disabled;
	}
</script>

<div
	class='tera-accordion-item'
	data-state={$state.dataState}
	data-disabled={$state.dataDisabled}
>
	<:slot />
</div>

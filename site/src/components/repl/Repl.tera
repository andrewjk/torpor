import tsb from "ts-blank-space";
import { build, parse } from "@tera/view/compile";
import script from "./view.txt?raw"

export default function Repl($props) {
	let input = $props.input ?? ""

	let $state = $watch({
		input,
		output: "",
		errors: []
	})

	let timer
	function debounce(fn, timeout = 600) {
		if (timer) {
			clearTimeout(timer)
			timer = setTimeout(fn, timeout)
		} else {
			timer = setTimeout(fn, 1)
		}
	}

	$run(() => {
		let input = $state.input
		debounce(() => {
			if (!input) {
				return
			}

			let parsed = parse(input)
			if (parsed.ok) {
				$state.errors = []
				let component = build(parsed.template)
				$state.output = `
<html>
<head>
${component.styles.map((s) => `<style>${s.style}</style>`).join("\n")}
<script>${script}</script>
<script>${
	tsb(
		component
			.code
			.replaceAll("export default function", "function")
			.replaceAll("export function", "function")
			.replace(/^import\s.+\n/gm, ""),
	)
}</script>
</head>
<body>
<div id="repl-target"></div>
<script>
const target = document.getElementById("repl-target");
try {
	mount(target, ${parsed.template.components.find(c => c.default).name});
} catch (error) {
	target.innerHTML = '<span style="color: red"><p>Script syntax error</p><p>' + error + '</p></span>';
}
</script>
</body>
</html>
`.trimStart()
			} else {
				$state.errors = parsed.errors.sort((a, b) => a.start - b.start)
			}
		})
	})

	@render {
		<div id="repl" class="hstack spaced full-width collapse">
			<div id="input-container" class="grow">
				<h3>Input</h3>
				<textarea
					id="input"
					class="code"
					:value={$state.input}
					:onmount={textAreaMount}
					oninput={textAreaInput}
					onkeydown={textAreaKeyDown}
				/>
			</div>

			<div id="output-container">
				<h3>Output</h3>
				<div class="vstack spaced">
					<div>
						<iframe srcdoc={$state.output} onload={resizeIframe} />
					</div>
					@if ($state.errors.length) {
						<div id="errors">
							<p>Template errors:</p>
							<ul>
							@for (let error of $state.errors) {
								<li>{error.message}, position: {error.start}</li>
							}
							</ul>
						</div>
					}
				</div>
			</div>
		</div>
	}

	@style {
		textarea {
			appearance: none;
			border: 1px dashed lightgray;
			border-radius: var(--brad);
			margin: 0;
			padding: 1rem;
		}

		textarea, iframe {
			width: 100%;
		}

		iframe {
			border: 1px dashed lightgray;
			border-radius: var(--brad);
		}

		#errors {
			color: red;
		}
	}

	function textAreaMount(e) {
		// HACK: Something is out of order somewhere
		setTimeout(() => {
			e.style.height = e.scrollHeight + "px";
			e.style.overflowY = "hidden";
		}, 1)
	}

	function textAreaInput(e) {
		let x = window.scrollX, y = window.scrollY;
		this.style.height = "";
		this.style.height = this.scrollHeight + "px";
		window.scrollTo(x, y);
	}

	// From https://stackoverflow.com/a/45396754
	let tabEnabled = true
	function textAreaKeyDown(e) {
		// Escape key toggles tab on/off
		if (e.keyCode === 27) {
			tabEnabled = !tabEnabled
			return false
		}

		// Enter xey?
		if (e.keyCode === 13 && tabEnabled) {
			// selection?
			if (this.selectionStart === this.selectionEnd) {
				// Find start of the current line
				var sel = this.selectionStart
				var text = this.value
				while (sel > 0 && text[sel - 1] !== "\n") {
					sel--
				}
				var lineStart = sel
				while (text[sel] === " " || text[sel] === "\t") {
					sel++
				}

				if (sel > lineStart) {
					// Insert carriage return and indented text
					document.execCommand("insertText", false, "\n" + text.substr(lineStart, sel - lineStart))

					// Scroll caret visible
					//this.blur()
					//this.focus()

					e.preventDefault()
					return false;
				}
			}
		}

		// Tab key?
		if (e.keyCode === 9 && tabEnabled)  {
			// selection?
			if (this.selectionStart === this.selectionEnd) {
				// These single character operations are undoable
				if (!e.shiftKey) {
					document.execCommand("insertText", false, "\t");
				} else {
					var text = this.value;
					if (this.selectionStart > 0 && text[this.selectionStart - 1] === "\t") {
						document.execCommand("delete");
					}
				}
			} else {
				// Block indent/unindent trashes undo stack
				// Select whole lines
				var selStart = this.selectionStart
				var selEnd = this.selectionEnd
				var text = this.value
				while (selStart > 0 && text[selStart - 1] !== "\n") {
					selStart--
				}
				while (selEnd > 0 && text[selEnd - 1] !== "\n" && selEnd < text.length) {
					selEnd++
				}

				// Get selected text
				var lines = text.substr(selStart, selEnd - selStart).split("\n")

				// Insert tabs
				for (var i = 0; i < lines.length; i++) {
					// Don't indent last line if cursor at start of line
					if (i === lines.length - 1 && lines[i].length === 0) {
						continue
					}

					// Tab or Shift+Tab?
					if (e.shiftKey) {
						if (lines[i].startsWith("\t")) {
							lines[i] = lines[i].substr(1)
						} else if (lines[i].startsWith("	")) {
							lines[i] = lines[i].substr(4)
						}
					} else {
						lines[i] = "\t" + lines[i]
					}
				}
				lines = lines.join("\n")

				// Update the text area
				this.value = text.substr(0, selStart) + lines + text.substr(selEnd)
				this.selectionStart = selStart
				this.selectionEnd = selStart + lines.length
			}

			e.preventDefault()
			return false
		}

		tabEnabled = true
		return true
	}

	function resizeIframe(e) {
	    e.target.style.height = e.target.contentWindow.document.documentElement.scrollHeight + "px";
	}
}
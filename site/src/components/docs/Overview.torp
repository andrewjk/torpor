import Demo from "./Demo.torp?raw"
import Repl from "../repl/Repl.torp"

export default function Overview() {
	@render {
		<div>
			<:head>
				<title>Overview | Torpor</title>
			</:head>

			<h1>Overview</h1>
			<p>
				Torpor is a JavaScript framework, designed for simplicity and completeness.
			</p>
			<p>
				ðŸš§ WARNING: VERY INCOMPLETE ðŸš§
			</p>

			<h2>Features</h2>
			<ul>
				<li>Compose your views with JavaScript, HTML and CSS</li>
				<li>Components are functions with script, markup and styles</li>
				<li>In-markup JavaScript logic with @if, @for, @switch and @await keywords</li>
					<ul>
						<li>And @replace, @const, @console, @debugger, @function and @html</li>
					</ul>
				<li>Runtime reactivity via proxies that can be used in any JavaScript file</li>
				<li>Scoped styles, two-way binding, child components and more</li>
				<li>An accessible, unstyled component library</li>
				<li>A site and app framework</li>
			</ul>

			<h2>A simple component</h2>
			<pre><code>{`
/**
 * Components are functions that are declared in a \`.torp\` file
 */
export default function Component($props: { name: string }) {
    // Use the $watch function to declare reactive state
    const $state = $watch({
        count: 0,
        get isEven() {
            return this.count % 2 === 0
        },
    })

    // Put your HTML markup in a @render section
    @render {
        <div>
            <h2>Hello, {$props.name}!</h2>

            <button onclick={() => $state.count++}>
                Increment
            </button>

            <p>
                The count is {$state.count}.
            </p>

            @if ($state.isEven) {
                <p>It is even.</p>
            } else {
                <p>It is odd.</p>
            }
        </div>
    }

    // Put your CSS styles in a @style section
    @style {
        h2 {
			color: magenta;
        }
    }
}
`.trim()}</code></pre>


			<h2>Playground</h2>
			<Repl input={`
export default function Component($props: { name: string }) {
    const $state = $watch({
        count: 0,
        get isEven() {
            return this.count % 2 === 0
        },
    })

    @render {
        <div>
            <h2>Hello, {$props.name}!</h2>

            <button onclick={() => $state.count++}>
                Increment
            </button>

            <p>
                The count is {$state.count}.
            </p>

            @if ($state.isEven) {
                <p>It is even.</p>
            } else {
                <p>It is odd.</p>
            }
        </div>
    }

    @style {
        h2 {
			color: magenta;
        }
    }
}
`.trimStart()} />

		</div>
	}
}

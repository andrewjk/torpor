
function buildClasses(value, styleHash) {
	if (typeof value === "string") {
		if (styleHash !== void 0) value += " " + styleHash;
		return value;
	} else {
		let classes = [];
		gatherNames("", value, classes);
		if (styleHash !== void 0) classes.push(styleHash);
		return classes.join(" ");
	}
}
function gatherNames(name, value, classes) {
	if (value) if (Array.isArray(value)) for (let v of value) gatherNames(v, v, classes);
	else if (typeof value === "object") for (let [n, v] of Object.entries(value)) gatherNames(n, v, classes);
	else classes.push(name);
}
function buildStyles(value) {
	if (typeof value === "string") return value;
	else {
		let styles = [];
		if (value) {
			if (Array.isArray(value)) for (let v of value) styles.push(v);
			else if (typeof value === "object") for (let [n, v] of Object.entries(value)) styles.push(`${n}: ${v}`);
		}
		return styles.join("; ");
	}
}
function formatText(value) {
	return value ?? "";
}
function addAnimation(el, entry, exit) {
	context_default.stashedAnimations.push({
		range: context_default.activeRange,
		el,
		in: entry,
		out: exit
	});
}
function addEvent(el, type, listener) {
	context_default.stashedEvents.push({
		range: context_default.activeRange,
		el,
		type,
		listener
	});
}
async function animate(el, enter, keyframes, options) {
	let animationOptions = Object.assign({
		direction: enter ? "normal" : "reverse",
		duration: 300,
		easing: "ease-in-out",
		fill: "forwards"
	}, options);
	const animation = el.animate(keyframes, animationOptions);
	setTimeout(() => {
		animation.timeline = el.ownerDocument.timeline;
	}, 1);
	let activeRange = context_default.activeRange;
	if (activeRange) {
		activeRange.animations ??= /* @__PURE__ */ new Set();
		activeRange.animations.add(animation);
		await animation.finished;
	}
}
function isFragmentNode(node) {
	return node.nodeType === 11;
}
function addFragment(fragment, parent, before, endNode) {
	const range = context_default.activeRange;
	const hydrationNode = context_default.hydrationNode;
	if (hydrationNode !== null) range.endNode = endNode ?? hydrationNode;
	else {
		range.startNode = fragment.firstChild;
		range.endNode = fragment.lastChild;
	}
	parent = before?.parentNode ?? parent;
	if (hydrationNode === null) parent.insertBefore(fragment, before);
	if (!isFragmentNode(parent)) {
		if (hydrationNode === null) {
			for (let effect of context_default.mountEffects) $run(effect);
			context_default.mountEffects.length = 0;
		}
		for (let event of context_default.stashedEvents) {
			context_default.activeRange = event.range;
			$run(function addFragmentEvent() {
				event.el.addEventListener(event.type, event.listener);
				return () => {
					event.el.removeEventListener(event.type, event.listener);
				};
			});
		}
		context_default.stashedEvents.length = 0;
		for (let animation of context_default.stashedAnimations) {
			context_default.activeRange = animation.range;
			$run(function addFragmentAnimation() {
				if (animation.in !== void 0) animate(animation.el, true, animation.in.keyframes, animation.in.options);
				if (animation.out !== void 0) return () => {
					animate(animation.el, false, animation.out.keyframes, animation.out.options);
				};
			});
		}
		context_default.stashedAnimations.length = 0;
		context_default.activeRange = range;
	}
}
function applyProps(el, props, propNamesUsed) {
	if (props !== void 0) {
		for (let [name, value] of Object.entries(props)) if (!propNamesUsed.includes(name)) if (name.startsWith("on")) {
			const eventName = name.substring(2);
			el.addEventListener(eventName, value);
		} else $run(function setAttribute$1() {
			el.setAttribute(name, value);
		});
	}
}
function clearRange(range) {
	devContext_default.onRangeCleared(range);
	let animations = range.animations !== null ? Array.from(range.animations) : void 0;
	let childRange = range.nextRange;
	while (childRange !== null && childRange.depth > range.depth) {
		if (childRange.animations !== null) {
			animations ??= [];
			animations.push(...childRange.animations);
		}
		releaseRange(childRange);
		childRange.depth = -2;
		childRange = childRange.nextRange;
	}
	range.nextRange = childRange;
	if (range.previousRange !== null) range.previousRange.nextRange = range.nextRange;
	if (range.nextRange !== null) range.nextRange.previousRange = range.previousRange;
	if (animations !== void 0) {
		animations.forEach((a) => {
			a.reverse();
			a.play();
		});
		Promise.all(animations.map((a) => a.finished)).then(() => clearNodes(range));
	} else clearNodes(range);
}
function clearNodes(range) {
	if (range.startNode !== null && range.endNode !== null) {
		let currentNode = range.endNode;
		while (currentNode !== range.startNode) {
			let previousNode = currentNode.previousSibling;
			currentNode.remove();
			currentNode = previousNode;
		}
		currentNode.remove();
	}
	releaseRange(range);
}
function releaseRange(range) {
	range.startNode = null;
	range.endNode = null;
	range.previousRange = null;
	range.nextRange = null;
	range.animations = null;
}
function clearLayoutSlot(range) {
	context_default.previousRange = range.previousRange;
	clearRange(range);
}
function newRange(name) {
	return {
		startNode: null,
		endNode: null,
		previousRange: null,
		nextRange: null,
		depth: -1,
		animations: null,
		name
	};
}
function popRange(oldRange) {
	context_default.activeRange = oldRange;
}
function pushRange(range, toParent = false) {
	const activeRange = context_default.activeRange;
	if (toParent) {
		const previousRange = context_default.previousRange;
		range.previousRange = previousRange;
		const nextRange = previousRange.nextRange;
		previousRange.nextRange = range;
		range.nextRange = nextRange;
		range.depth = activeRange.depth + 1;
	}
	context_default.activeRange = range;
	context_default.previousRange = range;
	devContext_default.onRangePushed(range);
	return activeRange;
}
function fillLayoutSlot(component, slot, parent, anchor, $props, $context) {
	const range = newRange(devContext_default.enabled ? component.name : void 0);
	const oldRange = pushRange(range, true);
	component(parent, anchor, $props, $context, { _: slot });
	popRange(oldRange);
	return range;
}
function getFragment(document, array, index, html, ns) {
	if (array[index] === void 0) if (ns === true) {
		const template = document.createElementNS("http://www.w3.org/2000/svg", "template");
		template.innerHTML = html;
		const fragment = new DocumentFragment();
		fragment.append(...template.childNodes);
		array[index] = fragment;
	} else {
		const template = document.createElement("template");
		template.innerHTML = html;
		array[index] = template.content;
	}
	return array[index].cloneNode(true);
}
function hydrate(parent, component, props, slots) {
	context_default.hydrationNode = parent.firstChild;
	context_default.rootRange = newRange(devContext_default.enabled ? "Root" : void 0);
	context_default.previousRange = context_default.rootRange;
	pushRange(context_default.rootRange);
	component(parent, null, props, void 0, slots);
	context_default.hydrationNode = null;
	for (let effect of context_default.mountEffects) $run(effect);
	context_default.mountEffects.length = 0;
}
function mount(parent, component, props, slots) {
	if (parent.childElementCount > 0) throw new Error("The parent node must have no child elements");
	while (parent.firstChild !== null) parent.firstChild.remove();
	if (context_default.rootRange === null) {
		context_default.rootRange = newRange(devContext_default.enabled ? "Root" : void 0);
		context_default.previousRange = context_default.rootRange;
		pushRange(context_default.rootRange);
	}
	component(parent, null, props, void 0, slots);
}
function newListItem(data, key) {
	return {
		startNode: null,
		endNode: null,
		previousRange: null,
		nextRange: null,
		depth: -1,
		animations: null,
		data,
		key
	};
}
const HYDRATION_START = "[";
const HYDRATION_END = "]";
const HYDRATION_BREAK = "^";
function isCommentNode(node) {
	return node.nodeType === 8;
}
function isTextNode(node) {
	return node.nodeType === 3;
}
function nodeCheckHydrationBreak(node) {
	if (context_default.hydrationNode !== null) {
		if (node !== null && isCommentNode(node) && node.data === HYDRATION_BREAK) {
			let comment = node;
			node = node.nextSibling;
			comment.remove();
		}
		context_default.hydrationNode = node;
	}
	return node;
}
function nodeNext(node, text = false) {
	if (context_default.hydrationNode !== null && text && isTextNode(node)) return node;
	return nodeCheckHydrationBreak(node.nextSibling);
}
function nodeAnchor(node) {
	if (context_default.hydrationNode !== null) {
		if (isCommentNode(node) && node.data === HYDRATION_START) {
			let currentNode = nodeNext(node);
			node.remove();
			let level = 1;
			while (currentNode !== null) {
				if (isCommentNode(currentNode)) {
					if (currentNode.data === HYDRATION_START) level += 1;
					else if (currentNode.data === HYDRATION_END) {
						level -= 1;
						if (level === 0) {
							const endNode = currentNode.nextSibling;
							currentNode.remove();
							if (context_default.hydrationNode === currentNode) context_default.hydrationNode = endNode;
							return endNode;
						}
					}
				}
				currentNode = currentNode.nextSibling;
			}
			if (currentNode === null) throw new Error("End hydration comment not found");
		}
	}
	return node;
}
function nodeChild(parent) {
	let childNode = parent.firstChild;
	if (context_default.hydrationNode !== null) {
		if (childNode === null) childNode = parent.appendChild(parent.ownerDocument.createTextNode(""));
		context_default.hydrationNode = childNode;
	}
	return childNode;
}
function nodeRoot(parent, text = false) {
	if (context_default.hydrationNode !== null) {
		let rootNode = context_default.hydrationNode;
		if (text && !isTextNode(rootNode) && rootNode.previousSibling !== null && isTextNode(rootNode.previousSibling)) {
			rootNode = rootNode.previousSibling;
			context_default.hydrationNode = rootNode;
		}
		if (isCommentNode(rootNode) && rootNode.data === HYDRATION_START) {
			rootNode = rootNode.nextSibling;
			context_default.hydrationNode = rootNode;
		}
		const range = context_default.activeRange;
		if (range.startNode === null) range.startNode = rootNode;
		return rootNode;
	} else return parent.firstChild;
}
function nodeSkip(node, count) {
	let nextNode = node;
	for (let i = 0; i < count; i++) nextNode = nodeCheckHydrationBreak(nextNode.nextSibling);
	return nextNode;
}
function runControl(range, anchor, create) {
	const oldRange = pushRange(range, true);
	$run(function runControl$1() {
		const oldBranchRange = pushRange(range);
		create(anchor);
		popRange(oldBranchRange);
	});
	if (context_default.hydrationNode) anchor = context_default.hydrationNode.nextSibling;
	popRange(oldRange);
}
function runControlBranch(range, create, name) {
	if (range.depth === -2) return;
	if (range.nextRange !== null && range.nextRange.depth > range.depth) clearRange(range.nextRange);
	const oldRange = pushRange(newRange(name), true);
	create();
	popRange(oldRange);
}
function moveRange(parent, range, before) {
	parent = before?.parentNode ?? parent;
	const endNode = range.endNode ?? range.startNode;
	let currentNode = range.startNode;
	while (currentNode !== null) {
		const nextNode = currentNode.nextSibling;
		parent.insertBefore(currentNode, before);
		if (currentNode === endNode) break;
		currentNode = nextNode;
	}
}
function runListItems(range, parent, anchor, oldItems, newItems, create, update) {
	let oldStartIndex = 0;
	let oldEndIndex = oldItems.length - 1;
	let oldStartItem = oldItems[0];
	let oldEndItem = oldItems[oldEndIndex];
	let newStartIndex = 0;
	let newEndIndex = newItems.length - 1;
	let newStartItem = newItems[0];
	let newEndItem = newItems[newEndIndex];
	let oldKeyToIndex;
	let newKeyToIndex;
	while (oldStartIndex <= oldEndIndex && newStartIndex <= newEndIndex) if (oldStartItem === null) oldStartItem = oldItems[++oldStartIndex];
	else if (oldEndItem === null) oldEndItem = oldItems[--oldEndIndex];
	else if (newStartItem === null) newStartItem = newItems[++newStartIndex];
	else if (newEndItem === null) newEndItem = newItems[--newEndIndex];
	else if (oldStartItem.key === newStartItem.key) {
		transferListItemData(oldStartItem, newStartItem, update);
		oldStartItem = oldItems[++oldStartIndex];
		newStartItem = newItems[++newStartIndex];
	} else if (oldEndItem.key === newEndItem.key) {
		transferListItemData(oldEndItem, newEndItem, update);
		oldEndItem = oldItems[--oldEndIndex];
		newEndItem = newItems[--newEndIndex];
	} else if (oldStartItem.key === newEndItem.key) {
		moveRange(parent, oldStartItem, oldEndItem.endNode.nextSibling);
		transferListItemData(oldStartItem, newEndItem, update);
		oldStartItem = oldItems[++oldStartIndex];
		newEndItem = newItems[--newEndIndex];
	} else if (oldEndItem.key === newStartItem.key) {
		moveRange(parent, oldEndItem, oldStartItem.startNode);
		transferListItemData(oldEndItem, newStartItem, update);
		oldEndItem = oldItems[--oldEndIndex];
		newStartItem = newItems[++newStartIndex];
	} else {
		if (oldKeyToIndex === void 0 || newKeyToIndex === void 0) {
			oldKeyToIndex = /* @__PURE__ */ new Map();
			for (let i = oldStartIndex; i < oldEndIndex; i++) oldKeyToIndex.set(oldItems[i].key, i);
			newKeyToIndex = /* @__PURE__ */ new Map();
			for (let i = newStartIndex; i < newEndIndex; i++) newKeyToIndex.set(newItems[i].key, i);
		}
		let oldIndex = oldKeyToIndex.get(newStartItem.key);
		let newIndex = newKeyToIndex.get(oldStartItem.key);
		if (oldIndex === void 0 && newIndex === void 0) {
			newStartItem.data = $watch(newStartItem.data, { shallow: true });
			create(newStartItem, oldStartItem.startNode);
			newStartItem.previousRange = oldStartItem.previousRange;
			newStartItem.nextRange = oldStartItem;
			oldStartItem.previousRange = newStartItem;
			clearRange(oldStartItem);
			oldStartItem = oldItems[++oldStartIndex];
			newStartItem = newItems[++newStartIndex];
		} else if (oldIndex === void 0) {
			newStartItem.data = $watch(newStartItem.data, { shallow: true });
			create(newStartItem, oldStartItem.startNode);
			newStartItem = newItems[++newStartIndex];
		} else if (newIndex === void 0) {
			clearRange(oldStartItem);
			oldStartItem = oldItems[++oldStartIndex];
		} else {
			const oldData = oldItems[oldIndex];
			moveRange(parent, oldData, oldStartItem.startNode);
			transferListItemData(oldData, newStartItem, update);
			oldItems[oldIndex] = null;
			newStartItem = newItems[++newStartIndex];
		}
	}
	if (oldStartIndex <= oldEndIndex || newStartIndex <= newEndIndex) if (oldStartIndex > oldEndIndex) {
		let before = oldStartItem?.startNode ?? oldItems[oldItems.length - 1]?.endNode?.nextSibling ?? anchor;
		for (; newStartIndex <= newEndIndex; newStartItem = newItems[++newStartIndex]) {
			newStartItem.data = $watch(newStartItem.data, { shallow: true });
			create(newStartItem, before);
			before = newStartItem.endNode.nextSibling;
		}
	} else for (; oldEndIndex >= oldStartIndex; oldStartItem = oldItems[oldEndIndex--]) clearRange(oldStartItem);
	if (newItems.length > 0) range.nextRange = newItems[0];
	else if (oldItems.length > 0) range.nextRange = oldItems[oldItems.length - 1].nextRange;
}
function transferListItemData(oldItem, newItem, update) {
	newItem.startNode = oldItem.startNode;
	newItem.endNode = oldItem.endNode;
	update(oldItem, newItem);
	newItem.data = oldItem.data;
}
function runList(range, parent, anchor, buildItems, create, update) {
	const oldRange = pushRange(range, true);
	let listItems = [];
	$run(function runList$1() {
		const oldBranchRange = pushRange(range);
		const newItems = buildItems();
		context_default.activeTarget = null;
		runListItems(range, parent, anchor, listItems, newItems, create, update);
		listItems = newItems;
		popRange(oldBranchRange);
	});
	if (context_default.hydrationNode !== null) anchor = context_default.hydrationNode.nextSibling;
	popRange(oldRange);
}
function setAttribute(el, name, value) {
	if (value === false || value === void 0 || value === null) el.removeAttribute(name);
	else el.setAttribute(name, value);
}
function setDynamicElement(el, tag) {
	if (context_default.hydrationNode !== null) return el;
	let newElement = el.ownerDocument.createElement(tag);
	el.replaceWith(newElement);
	return newElement;
}
let initialized = false;
var ReactiveDate = class ReactiveDate extends Date {
	constructor(...params) {
		super(...params);
		if (!initialized) this.#init();
		this[proxyHandledSymbol] = true;
		this[proxyDataSymbol] = {
			target: this,
			isArray: false,
			shallow: true,
			signals: /* @__PURE__ */ new Map()
		};
	}
	#init() {
		initialized = true;
		let reactivePrototype = ReactiveDate.prototype;
		let datePrototype = Date.prototype;
		const methods = Object.getOwnPropertyNames(datePrototype);
		for (const method of methods) {
			if (method.startsWith("get") || method.startsWith("to") || method === "valueOf") reactivePrototype[method] = function(...args) {
				const data = this[proxyDataSymbol];
				const result = datePrototype[method].apply(this, args);
				trackProxyEffect(data, "#time");
				return result;
			};
			if (method.startsWith("set")) reactivePrototype[method] = function(...args) {
				const data = this[proxyDataSymbol];
				const result = datePrototype[method].apply(this, args);
				updateSignal(data, "#time");
				return result;
			};
		}
	}
};
let t_add_fragment = addFragment;
let t_anchor = nodeAnchor;
let t_animate = addAnimation;
let t_apply_props = applyProps;
let t_attribute = setAttribute;
let t_child = nodeChild;
let t_class = buildClasses;
let t_dynamic = setDynamicElement;
let t_event = addEvent;
let t_fmt = formatText;
let t_fragment = getFragment;
let t_list_item = newListItem;
let t_next = nodeNext;
let t_pop_range = popRange;
let t_push_range = pushRange;
let t_range = newRange;
let t_root = nodeRoot;
let t_run_branch = runControlBranch;
let t_run_control = runControl;
let t_run_list = runList;
let t_skip = nodeSkip;
let t_style = buildStyles;
